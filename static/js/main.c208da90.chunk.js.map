{"version":3,"sources":["types.tsx","assets/musical-note.svg","components/MusicNote.tsx","components/Board.tsx","components/BottomPanel.tsx","assets/drum.svg","components/Panel.tsx","assets/drumbeat.mp3","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PanelItemEnum","MusicNote","top","left","alt","style","width","height","position","src","musicNote","Board","musicNotes","updateNotes","emojis","updateEmojis","className","TransitionGroup","map","emoji","CSSTransition","timeout","classNames","onEntered","index","findIndex","_emoji","key","slice","zIndex","type","note","noteIndex","_note","emojiList","BottomPanel","isOpen","onClick","Drawer","variant","anchor","open","IconButton","renderPanelContent","iconStyle","marginTop","Panel","onClose","selectedItem","Tooltip","title","ChevronRight","Object","keys","item","isSelected","PanelItem","buttonContent","color","undefined","sound","drum","InsertEmoticon","Palette","gifs","Gif","chat","Chat","renderPanelItem","socketURL","window","location","hostname","socket","io","transports","App","useState","isPanelOpen","setIsPanelOpen","setMusicNotes","setEmojis","selectedPanelItem","setSelectedPanelItem","audio","useRef","Audio","drumBeat","playEmoji","useCallback","x","Math","random","innerWidth","y","innerHeight","concat","uuidv4","playSound","current","randomX","randomY","notes","currentTime","play","useEffect","onConnect","onMessageEvent","message","value","on","off","minHeight","ChevronLeft","emit","Boolean","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c208da90.chunk.js","sourcesContent":["export interface IMessageEvent {\n  key: \"sound\" | \"emoji\";\n  value?: string;\n}\n\nexport interface IEmoji {\n  top: number;\n  left: number;\n  key: string;\n  type: string;\n}\n\nexport enum PanelItemEnum {\n  \"sound\" = \"sound\",\n  \"emoji\" = \"emoji\",\n  \"color\" = \"color\",\n  \"gifs\" = \"gifs\",\n  \"chat\" = \"chat\",\n}\n","export default __webpack_public_path__ + \"static/media/musical-note.49e6a279.svg\";","import React from \"react\";\nimport musicNote from \"../assets/musical-note.svg\";\n\nexport interface IMusicNoteProps {\n  top: number;\n  left: number;\n  key: string;\n}\n\nexport const MusicNote = ({ top, left }: IMusicNoteProps) => {\n  return (\n    <img\n      alt=\"musical note\"\n      style={{ width: 40, height: 40, top, left, position: \"absolute\" }}\n      src={musicNote}\n    />\n  );\n};\n","import \"./Board.css\";\n\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { IMusicNoteProps, MusicNote } from \"./MusicNote\";\n\nimport { IEmoji } from \"../types\";\nimport React from \"react\";\n\ninterface IBoardProps {\n  musicNotes: IMusicNoteProps[];\n  updateNotes: (notes: IMusicNoteProps[]) => void;\n  emojis: IEmoji[];\n  updateEmojis: (emojis: IEmoji[]) => void;\n}\n\nexport const Board = ({\n  musicNotes,\n  updateNotes,\n  emojis,\n  updateEmojis,\n}: IBoardProps) => {\n  return (\n    <div className=\"board-container\">\n      <TransitionGroup>\n        {emojis.map((emoji) => (\n          <CSSTransition\n            key={emoji.key}\n            timeout={1000}\n            classNames=\"note-transition\"\n            onEntered={() => {\n              const index = emojis.findIndex(\n                (_emoji) => _emoji.key === emoji.key\n              );\n              updateEmojis([\n                ...emojis.slice(0, index),\n                ...emojis.slice(index + 1),\n              ]);\n            }}\n          >\n            {/* <MusicNote {...note} /> */}\n            <div\n              style={{\n                width: 40,\n                height: 40,\n                top: emoji.top,\n                left: emoji.left,\n                position: \"absolute\",\n                zIndex: 9999999,\n              }}\n            >\n              {emoji.type}\n            </div>\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n\n      <TransitionGroup>\n        {musicNotes.map((note) => (\n          <CSSTransition\n            key={note.key}\n            timeout={1000}\n            classNames=\"note-transition\"\n            onEntered={() => {\n              const noteIndex = musicNotes.findIndex(\n                (_note) => _note.key === note.key\n              );\n              updateNotes([\n                ...musicNotes.slice(0, noteIndex),\n                ...musicNotes.slice(noteIndex + 1),\n              ]);\n            }}\n          >\n            <MusicNote {...note} />\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    </div>\n  );\n};\n","import { Drawer, IconButton } from \"@material-ui/core\";\n\nimport { PanelItemEnum } from \"../types\";\nimport React from \"react\";\n\ninterface IPanelProps {\n  isOpen: boolean;\n  onClick: (key: string, value: string) => void;\n  type?: PanelItemEnum;\n}\n\nconst emojiList: string[] = [\"😍\", \"😎\", \"👏\", \"👀\", \"✨\", \"🦃\"];\n\nexport const BottomPanel = ({ isOpen, onClick, type }: IPanelProps) => {\n  const renderPanelContent = () => {\n    switch (type) {\n      case \"emoji\":\n        return (\n          <>\n            {emojiList.map((emoji) => (\n              <div key={emoji} className=\"bottom-panel-emoji\">\n                <IconButton onClick={() => onClick(\"emoji\", emoji)}>\n                  {emoji}\n                </IconButton>\n              </div>\n            ))}\n          </>\n        );\n    }\n  };\n\n  return (\n    <Drawer variant=\"persistent\" anchor=\"bottom\" open={isOpen}>\n      <div className=\"bottom-panel-container\">{renderPanelContent()}</div>\n    </Drawer>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/drum.5ae1d20c.svg\";","import \"./Panel.css\";\n\nimport {\n  Chat,\n  ChevronRight,\n  Gif,\n  InsertEmoticon,\n  Palette,\n} from \"@material-ui/icons/\";\nimport { Drawer, IconButton, Tooltip } from \"@material-ui/core\";\n\nimport { PanelItemEnum } from \"../types\";\nimport React from \"react\";\nimport drum from \"../assets/drum.svg\";\n\nconst iconStyle: React.CSSProperties = {\n  width: 50,\n  height: 50,\n  marginTop: 10,\n};\n\ninterface IPanelProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onClick: (key: string) => void;\n  selectedItem?: PanelItemEnum;\n}\n\nexport const Panel = ({\n  isOpen,\n  onClose,\n  onClick,\n  selectedItem,\n}: IPanelProps) => {\n  return (\n    <Drawer variant=\"persistent\" anchor=\"right\" open={isOpen}>\n      <div className=\"panel-container\">\n        <Tooltip title=\"close panel\">\n          <IconButton style={{ marginTop: 20 }} onClick={onClose}>\n            <ChevronRight />\n          </IconButton>\n        </Tooltip>\n        {Object.keys(PanelItemEnum).map((item) => (\n          <PanelItem\n            {...item}\n            key={item}\n            title={item}\n            onClick={() => onClick(item)}\n            isSelected={selectedItem === item}\n          />\n        ))}\n      </div>\n    </Drawer>\n  );\n};\n\ninterface IPanelItemProps {\n  onClick: () => void;\n  title: string;\n  isSelected: boolean;\n}\n\nconst PanelItem = ({ title, onClick, isSelected }: IPanelItemProps) => {\n  const renderPanelItem = () => {\n    let buttonContent;\n    const style: React.CSSProperties = {\n      ...iconStyle,\n      color: isSelected ? \"orange\" : undefined,\n    };\n\n    switch (title) {\n      case PanelItemEnum.sound:\n        buttonContent = <img style={iconStyle} src={drum} alt={title} />;\n        break;\n      case PanelItemEnum.emoji:\n        buttonContent = <InsertEmoticon style={style} />;\n        break;\n      case PanelItemEnum.color:\n        buttonContent = <Palette style={style} />;\n        break;\n      case PanelItemEnum.gifs:\n        buttonContent = <Gif style={style} />;\n        break;\n      case PanelItemEnum.chat:\n        buttonContent = <Chat style={style} />;\n        break;\n    }\n\n    return <IconButton onClick={onClick}>{buttonContent}</IconButton>;\n  };\n\n  return (\n    <Tooltip title={title}>\n      <div>{renderPanelItem()}</div>\n    </Tooltip>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/drumbeat.e0f520f5.mp3\";","import \"./App.css\";\n\nimport { IEmoji, IMessageEvent, PanelItemEnum } from \"./types\";\nimport { IconButton, Tooltip } from \"@material-ui/core\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\n\nimport { Board } from \"./components/Board\";\nimport { BottomPanel } from \"./components/BottomPanel\";\nimport { ChevronLeft } from \"@material-ui/icons\";\nimport { IMusicNoteProps } from \"./components/MusicNote\";\nimport { Panel } from \"./components/Panel\";\n//@ts-ignore\nimport drumBeat from \"./assets/drumbeat.mp3\";\nimport io from \"socket.io-client\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst isDebug = false;\n\nconst socketURL =\n  window.location.hostname === \"localhost\"\n    ? \"ws://localhost:8000\"\n    : \"wss://adventure-chat.herokuapp.com\";\n\nisDebug && console.log(\"socket url = \", socketURL);\n\nconst socket = io(socketURL, { transports: [\"websocket\"] });\n\nconst generateRandomXY = () => {\n  const randomX = Math.random() * window.innerWidth;\n  const randomY = Math.random() * window.innerHeight;\n  return { x: randomX, y: randomY };\n};\n\nfunction App() {\n  const [isPanelOpen, setIsPanelOpen] = useState(true);\n  const [musicNotes, setMusicNotes] = useState<IMusicNoteProps[]>([]);\n  const [emojis, setEmojis] = useState<IEmoji[]>([]);\n  const [selectedPanelItem, setSelectedPanelItem] = useState<PanelItemEnum>();\n\n  const audio = useRef<HTMLAudioElement>(new Audio(drumBeat));\n\n  const playEmoji = useCallback((type: string) => {\n    const { x, y } = generateRandomXY();\n\n    setEmojis((emojis) =>\n      emojis.concat({ top: y, left: x, key: uuidv4(), type })\n    );\n  }, []);\n\n  const playSound = useCallback(() => {\n    if (!audio || !audio.current) return;\n\n    const randomX = Math.random() * window.innerWidth;\n    const randomY = Math.random() * window.innerHeight;\n\n    setMusicNotes((notes) =>\n      notes.concat({ top: randomY, left: randomX, key: uuidv4() })\n    );\n\n    audio.current.currentTime = 0;\n    audio.current.play();\n  }, [audio]);\n\n  const onClickPanelItem = (key: string) => {\n    switch (key) {\n      case \"sound\":\n        playSound();\n\n        socket.emit(\"event\", {\n          key: \"sound\",\n        });\n        break;\n\n      case \"emoji\":\n        setSelectedPanelItem(\n          selectedPanelItem === PanelItemEnum.emoji\n            ? undefined\n            : PanelItemEnum.emoji\n        );\n\n        break;\n    }\n  };\n\n  useEffect(() => {\n    function onConnect() {\n      isDebug && console.log(\"connected to socket\");\n    }\n\n    const onMessageEvent = (message: IMessageEvent) => {\n      switch (message.key) {\n        case \"sound\":\n          playSound();\n          break;\n        case \"emoji\":\n          if (message.value) {\n            playEmoji(message.value);\n          }\n      }\n    };\n\n    socket.on(\"connect\", onConnect);\n\n    socket.on(\"event\", onMessageEvent);\n\n    return () => {\n      socket.off(\"connect\", onConnect);\n      socket.off(\"event\", onMessageEvent);\n    };\n  }, [playEmoji, playSound]);\n\n  const onClickBottomPanel = (key: string, value: string) => {\n    switch (key) {\n      case \"emoji\":\n        playEmoji(value);\n        socket.emit(\"event\", {\n          key: \"emoji\",\n          value,\n        });\n    }\n  };\n\n  return (\n    <div className=\"app\" style={{ minHeight: window.innerHeight - 10 }}>\n      <Board\n        musicNotes={musicNotes}\n        updateNotes={setMusicNotes}\n        emojis={emojis}\n        updateEmojis={setEmojis}\n      />\n\n      <div className=\"open-panel-button\">\n        {!isPanelOpen && (\n          <Tooltip title=\"open panel\">\n            <IconButton\n              onClick={() => {\n                setIsPanelOpen(true);\n              }}\n            >\n              <ChevronLeft />\n            </IconButton>\n          </Tooltip>\n        )}\n      </div>\n      <Panel\n        onClick={onClickPanelItem}\n        isOpen={isPanelOpen}\n        onClose={() => {\n          setIsPanelOpen(false);\n        }}\n        selectedItem={selectedPanelItem}\n      />\n\n      <BottomPanel\n        type={selectedPanelItem}\n        onClick={onClickBottomPanel}\n        isOpen={Boolean(selectedPanelItem)}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import \"./index.css\";\n\nimport App from \"./App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}